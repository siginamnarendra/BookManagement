package com.customerService.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.customerService.client.JwtClient;
import com.customerService.dao.CustomerJpaRepository;
import com.customerService.dto.AuthRequest;
import com.customerService.dto.UserCredential;
import com.customerService.entity.Customer;
import com.customerService.exceptions.UserAlreadyExistedException;
import com.customerService.exceptions.UserNotFoundException;
import java.util.List;
import javax.transaction.Transactional;

@Service
public class CustomersService {

	@Autowired
	private CustomerJpaRepository customerJpaRepository;
	@Autowired
	private JwtClient jwtClient;

	@Transactional
	public String saveUser(Customer theCustomer) {
		String email = theCustomer.getCustomerEmail();
			try {
				Customer customer = customerJpaRepository.findById(email).get();
				System.out.println(customer.getCustomerAddress()+" _"+customer.getCustomerName()+"_______");
				UserCredential user = new UserCredential();
				System.out.println(theCustomer.getCustomerName() + "_______");
				user.setEmail(theCustomer.getCustomerName());
				user.setName(theCustomer.getCustomerEmail());
				user.setPassword(theCustomer.getPassword());
				jwtClient.addNewUser(user);
				Customer savedCustomer = customerJpaRepository.save(theCustomer);
				return savedCustomer.getCustomerName() + " is registered as a user with " + " username : "
						+ savedCustomer.getCustomerEmail();
				
			}catch(Exception es)
			{
				throw new UserAlreadyExistedException("email :" + email + " is existed");
			}


	}

	public String logUser(AuthRequest authRequest) {

		return jwtClient.getToken(authRequest);

	}

	@Transactional
	public List<Customer> getAllCustomer() {

		return customerJpaRepository.findAll();

	}

	public Customer getCustomerbyid(String id) {
		return customerJpaRepository.findById(id)
				.orElseThrow(() -> new UserNotFoundException("No customer found with the phn: " + id));
	}
}
